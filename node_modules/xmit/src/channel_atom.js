/** 
 * 	@class 
 * 	Channel is the most basic type of xmit 
 * 	channel... it keeps a simple array of listeners.
 * 	and runs through them on xmit in a fifo order.
 */

// var log = require("dicey_debug").log;

/** 
 *	@function
 * 	@constructor
 * 	@param {string} name
 * 	@param {object} context... 
 * 		default context for this channel... 
 */
function Channel(name, context) { 
	this.init(name, context);
}

/** 
 * 	@function init
 * 	Called by constructor directly
 */
Channel.prototype.init = function(name, context) { 
	this.name = name;
	this._ctx = context;
	this._listeners = [];
	this._i = 0;
}

/** 
 *	@function on
 * 		Adds a listener to this channel
 * 	@param {function} lambda.. the listening function
 * 	@param {object} context.. the overriding context
 */
Channel.prototype.on = function(lambda, context) { 
	var ctx = context || this.context;
	this._listeners[this._i++] = function(msg) { 
		lambda.call(ctx, msg);
	}
	return this;
}

/**
 *	@function xmit
 * 		Called by the xmit instance.. .will run all the listeners
 * 	@param {*} msg. : the data being transmitter
 */
Channel.prototype.xmit = function(msg) { 
	var _ls = this._listeners;
	_ls.forEach(function(ls) { 
			ls(msg);
		}
	);
	return msg;
}

Channel.prototype.toString = function() { 
	return "XMIT CHANNEL ATOM"
}

module.exports = Channel;


