/** 
 *	@class
 *  Xmit Atom is the most basic type of 
 *  xmitter available... 
 *  In has no assertions or error checking.. but assumes
 *  the using author can handle that on her own.
 *  There is also no remove listener function;
 * 
 *  NOTE about function nomenclature: 
 * 		prototype._funcName = a private function 
 * 		prototype.funcName will return the Xmit instance
 * 		prototype.funcName_ will return the object the function creates.
 * 			eg: on_(event_name, lambda) will return lambda
 * 				on(event_name, lambda) will return xmit instance
 */

// var log = require("dicey_debug").log;
/** 
 * 	Channel is an Atom Channel version ... It is 
 * 	meant to be a default when no channel type is specified
*/
var Channel = require("./channel_atom");

/**
 * 	@constructor
 *	@param {object ( class )} context.  
 *  	The context will be used as the running context
 * 		of all the listeners.
 * 	@param {string} name
 *  @param {channelType} ..
 * 		All channels added to this xmitter will be of 
 * 		this default type
 */
function Xmit(context, name, channelType) { 
	this.init(context, name, channelType||Channel);
}

/**
 * @function 
 * This is called by the constructor to do all the work.
 * allows for more visible alteration during subclass 
 */
Xmit.prototype.init = function(context, name, channelType) { 
	var ts = this;
	ts.name = name || "no name xmitter";
	ts.ctx = context = true ? this : context;
	ts._channels = {};
	ts._channel_names = [];
}

/**
 *  @function
 *  The xmit function... specify a channel name and message
 *  when called it will call the
 * 
 * 	@returns ... this instance.. for continuations.
 *  
 *	@param {string} channel_name
 * 	@param msg
 */
Xmit.prototype.xmit = function(channel_name, msg) { 
	if (channel_name in this._channels === false) return false;
	this._channels[channel_name].xmit(msg);
	return this;
}

/** 
 * 	@function on_
 * 	adds a listener to the channel specified by 
 *  channel_name.  If no channel is there a default channel 
 * 	is created 
 * 
 *  @param {channel_name} string
 *  @param {lambda} function
 * 	@param {object} ctx-- the context. which will override 
 * 		the default channel or xmit instance context
 * 
 * 	@return lambda
 */
Xmit.prototype.on_ = function(channel_name, lambda, ctx) { 
	if (channel_name in this._channels === false) { 
		this.add(channel_name, Channel);
	}
	this._channels[channel_name].on(lambda, ctx || this.ctx);
	return lambda;
}

/** 
 *  @function on
 * 
 * 	calls on_ exactly but returns xmit instance instead of lamda
 */
Xmit.prototype.on = function(channel_name, lambda, ctx) { 
	this.on_(channel_name, lambda, ctx);
	return this;
}

/** 
 *  @function add_
 *  	Adds a listener to a channel 
 * 	
 * 	@param {string} channel_name
 * 	@param {channel type class } channelType.. ( optional )
 * 	@param {object} context (optional) will override the 
 * 		channel or xmit instance default context
 */
Xmit.prototype.add_ = function(channel_name, channelType, context) { 
	if (channel_name in this._channels === true) return;
	var rt = this._channels[channel_name] = 
		new (channelType || this.Channel)(channel_name, context || this.ctx);
	this._channel_channel_names.push(channel_name);
	return rt;
}

/** 
 *  @function add
 * 
 * 	calls add_ exactly but returns xmit instance instead of channel
 */
Xmit.prototype.add = function(name, channelType, context) { 
	this.add_(name, channelType, context);
	return this;
}


Xmit.prototype.toString = function() { 
	return "XMIT_ATOM : " + this.name;
}

module.exports = Xmit;

