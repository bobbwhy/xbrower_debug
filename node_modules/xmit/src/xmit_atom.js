/** 
 *	@class XmitAtom
 *  	@description Xmit Atom is the most basic type of 
 *  	xmitter available. 
 *  In has no assertions or error checking.. 
 *  There is also no remove listener function;
 * 	<br>
 *  NOTE about function nomenclature: <br>
 * 		prototype._funcName = a private function <br>
 * 		prototype.funcName will return the Xmit instance<br>
 * 		prototype.funcName_ will return the object the function creates.<br>
 * 			eg: on_(event_name, lambda) will return lambda
 * 				on(event_name, lambda) will return xmit instance<br>
 *	<br>
 * 	Default Channel is an Atom Channel version ... It is 
 * 	meant to be a default when no channel type is specified
*/

'use strict';

var Channel = require("./channel_atom");

/**
 * 	@constructor
 *	@param {object} context.  
 *  	The context will be used as the running context
 * 		of all the listeners.
 * 	@param {string} name
 *  @param {object} channelType
 * 		All channels added to this xmitter will be of 
 * 		this default type
 */
function XmitAtom(context, name, channelType) { 
	this.init(context, name, channelType||Channel);
}

XmitAtom.prototype.FAMILY = "XMIT";
XmitAtom.prototype.TYPE = "XMIT_ATOM";

/**
 * @function init
 * @description
 * 		This is the costructor.  Sets, name, context as instance vars
 *		Also will setup holders for channels and channel_names
 *	@memberof XmitAtom
 */
XmitAtom.prototype.init = function(context, name, channelType) { 
	var ts = this;
	ts.name = name || "no name xmitter";
	ts.ctx = context = true ? this : context;
	ts._channels = {};
	ts._channel_names = [];
}

/**
 *  @function xmit
 *  @description 
 *  	Xmits. ( broadcasts ) on a channel and will cause all the 
 * 		listening functions of that channel to run.
 * 		can send an optional message to all the listening functions
 * 
 *	@param {string} channel_name
 * 	@param {*} msg ( message ) 
 *
 *	@returns {object} xmit instance ( for continuations )
 *
 * 	@memberof XmitAtom
 */
XmitAtom.prototype.xmit = function(channel_name, msg) { 
	if (channel_name in this._channels === false) return false;
	this._channels[channel_name].xmit(msg);
	return this;
}

/** 
 * 	@function on_
 * 	@description
 * 		adds a listener to the channel specified by 
 *  	channel_name.  If no channel of the provided channel 
 * 		name exists then it will create a channel of the default channel type.
 *		returns the listening function that was added.
 * 
 *  @param {string} channel_name
 *  @param {function} lambda
 * 		@description 
 *		The listening function.  The function will be passed the message argument.
 * 	@param {object} ctx
 * 		@description
 * 		the context. which will override 
 * 		the default channel or xmit instance context
 * 
 * 	@returns {object} xmit instance (for continuations)
 *	@memberof XmitAtom
 */
XmitAtom.prototype.on_ = function(channel_name, lambda, ctx) { 
	if (channel_name in this._channels === false) { 
		this.add(channel_name, Channel);
	}
	this._channels[channel_name].on(lambda, ctx || this.ctx);
	return lambda;
}

/** 
 *  @function on
 * 	@description 
 * 		calls on_ exactly but returns xmit instance instead of lamda
 *
 *	@param {string} channel_name
 *  @param {function} lambda
 * 		@description 
 *		The listening function.  The function will be passed the message argument.
 * 	@param {object} ctx
 * 		@description
 * 		the context. which will override 
 * 		the default channel or xmit instance context
 * 
 * 	@returns xmitAtom instance
 *	@memberof XmitAtom
 */
XmitAtom.prototype.on = function(channel_name, lambda, ctx) { 
	this.on_(channel_name, lambda, ctx);
	return this;
}

/** 
 *  @function add_
 *  @description
 *		Adds a listener to a channel 
 * 	
 * 	@param {string} channel_name
 * 	@param {object} channelType.. ( optional )
 * 	@param {object} context (optional) will override the 
 * 		channel or xmit instance default context
 * 	@returns the new channel instance
 *	@memberof XmitAtom
 */
Xmit.prototype.add_ = function(channel_name, channelType, context) { 
	if (channel_name in this._channels === true) return;
	var rt = this._channels[channel_name] = 
		new (channelType || Channel)(channel_name, context || this.ctx);
	return rt;
}

/** 
 *  @function add
 * 	@description
 * 		calls add_ exactly but returns xmit instance instead of channel

 * 	@param {string} channel_name
 * 	@param {object} channelType.. ( optional )
 * 	@param {object} context (optional) will override the 
 * 		channel or xmit instance default context
 * 	@returns xmitAtom instance
 *	@memberof XmitAtom
 */
Xmit.prototype.add = function(channel_name, channelType, context) { 
	this.add_(channel_name, channelType, context);
	return this;
}


Xmit.prototype.toString = function() { 
	return "XMIT_ATOM : " + this.name;
}

module.exports = Xmit;

